import{a as q,j as s,F as I}from"./jsx-runtime-670450c2.js";import{r as l}from"./index-f1f749bf.js";import{c as _}from"./index-2e4736b8.js";import{I as L}from"./icon-0c6fe2d8.js";import{I as U}from"./input-e1f1d92b.js";import{T as M}from"./transition-3cdaf158.js";import"./_commonjsHelpers-042e6b4d.js";import"./index-5ae439ea.js";import"./index-4d501b15.js";import"./inheritsLoose-9eefaa95.js";import"./index-96c5f47c.js";const F=(e,a)=>{l.useEffect(()=>{const c=n=>{!e.current||e.current.contains(n.target)||a(n)};return document.addEventListener("click",c),()=>{document.removeEventListener("click",c)}},[e,a])},H=(e,a=300)=>{const[c,n]=l.useState(e);return l.useEffect(()=>{const o=setTimeout(()=>n(e),a);return()=>{clearTimeout(o)}},[e,a]),c},m=e=>{const{fetchSuggestions:a,onSelect:c,className:n,renderOption:o,...p}=e,y=l.useRef(!1),D=l.useRef(null),[g,V]=l.useState(""),E=H(g),[r,i]=l.useState(),[T,k]=l.useState(!1),[h,d]=l.useState(-1);F(D,()=>i([]));const P=_("amt-auto-complete",n);l.useEffect(()=>{if(g&&y.current){const t=a(g);t instanceof Promise?(k(!0),t.then(i).finally(()=>k(!1))):i(t)}else i([])},[E]);const R=t=>{const u=t.target.value.trim();y.current=!0,V(u)},f=(t,u)=>{if(!r||r.length===0||u){d(-1);return}t>=r.length?d(0):t<0?d(r.length-1):d(t)},z=t=>{switch(t.key){case"Enter":r&&r.length>0&&(y.current=!1,b(r[h]));break;case"ArrowUp":f(h-1);break;case"ArrowDown":f(h+1);break;case"Escape":i([]),d(-1);break}},b=t=>{V(t.value),c(t)},G=()=>{const t=u=>_("suggestion-item",{"item-highlighted":u===h});return s(M,{in:r&&r.length>0,timeout:300,animation:"zoom-in-top",children:s("ul",{onMouseLeave:()=>f(-1,!0),className:"amt-suggestions-group",children:T?s(L,{icon:"spinner",theme:"dark",spin:!0}):r&&r.length>0&&r.map((u,O)=>s("li",{role:"presentation",className:t(O),onMouseEnter:()=>f(O),onSelect:()=>b(u),onClick:()=>b(u),children:o?o(u):u.value},O))})})};return q("div",{className:P,ref:D,children:[s(U,{value:g,onChange:R,onKeyDown:z,...p}),G()]})};try{m.displayName="AutoComplete",m.__docgenInfo={description:"",displayName:"AutoComplete",props:{fetchSuggestions:{defaultValue:null,description:"",name:"fetchSuggestions",required:!0,type:{name:"(keyword: string) => DataSourceObject[] | Promise<DataSourceObject[]>"}},onSelect:{defaultValue:null,description:"",name:"onSelect",required:!0,type:{name:"(suggestion: DataSourceObject) => void"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((data: DataSourceObject) => ReactNode)"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"xs"'},{value:'"sm"'},{value:'"md"'},{value:'"lg"'},{value:'"xl"'}]}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"IconProp"}},iconTheme:{defaultValue:null,description:"",name:"iconTheme",required:!1,type:{name:"enum",value:[{value:'"info"'},{value:'"warning"'},{value:'"primary"'},{value:'"secondary"'},{value:'"success"'},{value:'"danger"'},{value:'"light"'},{value:'"dark"'}]}},prepend:{defaultValue:null,description:"",name:"prepend",required:!1,type:{name:"ReactNode"}},append:{defaultValue:null,description:"",name:"append",required:!1,type:{name:"ReactNode"}}}}}catch{}try{autoComplete.displayName="autoComplete",autoComplete.__docgenInfo={description:"",displayName:"autoComplete",props:{fetchSuggestions:{defaultValue:null,description:"",name:"fetchSuggestions",required:!0,type:{name:"(keyword: string) => DataSourceObject[] | Promise<DataSourceObject[]>"}},onSelect:{defaultValue:null,description:"",name:"onSelect",required:!0,type:{name:"(suggestion: DataSourceObject) => void"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((data: DataSourceObject) => ReactNode)"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"xs"'},{value:'"sm"'},{value:'"md"'},{value:'"lg"'},{value:'"xl"'}]}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"IconProp"}},iconTheme:{defaultValue:null,description:"",name:"iconTheme",required:!1,type:{name:"enum",value:[{value:'"info"'},{value:'"warning"'},{value:'"primary"'},{value:'"secondary"'},{value:'"success"'},{value:'"danger"'},{value:'"light"'},{value:'"dark"'}]}},prepend:{defaultValue:null,description:"",name:"prepend",required:!1,type:{name:"ReactNode"}},append:{defaultValue:null,description:"",name:"append",required:!1,type:{name:"ReactNode"}}}}}catch{}const oe={title:"AutoComplete",component:m,tags:["autodocs"]},K=e=>[{value:"bradley",name:"bradley",number:4},{value:"pope",name:"pope",number:5},{value:"caruso",name:"caruso",number:6},{value:"cook",name:"cook",number:7},{value:"cousins",name:"cousins",number:8},{value:"james",name:"james",number:23},{value:"AD",name:"AD",number:13},{value:"green",name:"green",number:42},{value:"howard",name:"howard",number:34},{value:"kuzma",name:"kuzma",number:54},{value:"McGee",name:"McGee",number:12},{value:"rando",name:"rando",number:32}].filter(n=>n.name.includes(e)).sort(),W=e=>{console.log(e)},$=e=>{const a=e;return q(I,{children:[s("h2",{children:a.name}),s("h4",{children:a.number})]})},v=e=>s(m,{...e,renderOption:e.renderOption||$,fetchSuggestions:e.fetchSuggestions||K,onSelect:e.onSelect||W}),S=()=>s(m,{fetchSuggestions:n=>fetch(`https://api.github.com/search/users?q=${n}`).then(o=>o.json()).then(({items:o})=>o.slice(0,10).map(p=>({value:p.login,...p}))),onSelect:n=>console.log(n),renderOption:n=>{const o=n;return q(I,{children:[s("h2",{children:o.login}),s("h4",{children:o.url})]})}});var C,j,N;v.parameters={...v.parameters,docs:{...(C=v.parameters)==null?void 0:C.docs,source:{originalSource:"args => <AutoComplete {...args} renderOption={args.renderOption || renderOption} fetchSuggestions={args.fetchSuggestions || fetchSuggestions} onSelect={args.onSelect || select} />",...(N=(j=v.parameters)==null?void 0:j.docs)==null?void 0:N.source}}};var w,A,x;S.parameters={...S.parameters,docs:{...(w=S.parameters)==null?void 0:w.docs,source:{originalSource:`() => {
  const fetchGithubUsers = (query: string) => fetch(\`https://api.github.com/search/users?q=\${query}\`).then(res => res.json()).then(({
    items
  }) => items.slice(0, 10).map((item: any) => ({
    value: item.login,
    ...item
  })));
  const onSelect = (data: any) => console.log(data);
  const render = (data: DataSourceType) => {
    const sData = (data as DataSourceType<GithubUserProps>);
    return <>\r
        <h2>{sData.login}</h2>\r
        <h4>{sData.url}</h4>\r
      </>;
  };
  return <AutoComplete fetchSuggestions={fetchGithubUsers} onSelect={onSelect} renderOption={render} />;
}`,...(x=(A=S.parameters)==null?void 0:A.docs)==null?void 0:x.source}}};const se=["Playground","AutoCompleteWithLoading"];export{S as AutoCompleteWithLoading,v as Playground,se as __namedExportsOrder,oe as default};
//# sourceMappingURL=autoComplete.stories-d45286fd.js.map
